* Pre-IB computer science project
** Overview
   - The project allows you to increase your final grade by a maximum
     of 3 grades (maximum level 3 in grading levels below)
   - Your program must process text data in a meaningful way, but you
     should not strive for a real-world application.
   - Grading is based on
     - specification
     - correctness
     - code clarity
     - resource management.
   - An example is provided for you below, but your program need not
     be as complicated. The example below is relatively complicated,
     because it
     - defines a class and uses it to store and analyze data
     - contains a nested loop (loop within a loop) to process the
       data
     - uses ~None~ values to indicate that an object has already been
       processed.

** Project deadline
   The dealine of the project is <2025-01-31 Fri 23:59>.

** Project submission
   - Your submission consists of
     1. one *PDF file* containing documentation
        1. your target grade level (1, 2 or 3)
        2. specification
        3. test case with typical input
        4. explanation of resource handling (level 2)
     2. one or more ~.py~-files containing the code
        - if your program uses any libraries / modules you needed to
          install yourself, your submission /must/ also contain file
          =requirements.txt=
          - if you do not know what this means, do a web search with
            keywords
            #+begin_example
            pip freeze requirements.txt
            #+end_example
            or see
            e.g. [[https://www.jetbrains.com/help/pycharm/managing-dependencies.html]]
     3. possibly one or more text data files needed for the test case.
   - Submission is made via email by providing either
     - one ~.zip~-archive containing all files as an attachment to the
       email, or
     - a link to a GitHub repository containing all files.
   - It is strongly suggested that you use documentation structure
     similar to the example below, as this will make both your and my
     life a lot easier.
   
** Grading levels
*** Criteria for level 1
**** Specification
     - There is a sensible description of what the program does.
     - The program reads input from the user and/or from a text data
       file and performs a meaningful operation.
     - Format of input is explained clearly.
     - The input contains multiple items of data (multiple numbers, or
       multiple lines of text, or similar).
     - At least some of the data is read from the user or from a file
       using a loop (~while~, ~for~).
       - Note: There are /many/ ways to do this. Read multiple lines
         from a file. Repeat the same operation multiple times for the
         user. Read multiple lines from user input.
**** Correctness
     - The program works correctly in one documented test case with
       typical input.
     - If any text data files are required to test this, they are
       supplied.
     - If any external libraries / modules are used, file
       =requirements.txt= is also supplied.
**** Code clarity
     - There is no unnecessary whitespace (no extra empty lines or
       extra spaces).
     - Identifiers (names of variables, functions and classes) are
       meaningful in the context of the program.
*** Additional criteria for level 2
**** Code clarity
     All non-trivial parts of the code are explained in code comments
     so that any fellow student would understand your
     code. \ldquo{}Non-trivial\rdquo is therefore defined by assuming
     that the reader is a fellow student.

     This is a great risk for many students: you will write
     complicated code or use programming techniques and tools other
     students are not familiar with, and fail to explain them
     properly. A new technique is explained properly only if your
     fellow students would /truly/ understand the technique. This
     requirement is much more difficult to fulfill than you might
     think.

     By far the easiest way to tackle this risk is to only use
     techniques covered on this course. Otherwise, to reach level 2,
     you may spend 30 minutes incorporating a new technique into your
     program and then 5 hours trying to come up with an explanation a
     fellow student would understand.
**** Resource management
     Opened resources are closed when no longer needed. This is also
     documented.
*** Additional criteria for level 3
**** Code clarity
     - The flow of the program is split into meaningful functions.
     - The role of defined functions is explained in docstrings.
** Example project
*** Documentation
**** Target assessment level
     Target assessment level of this work is 3.
**** Specification
***** What does the program do?
      The program
      1. reads data about persons from a file
      2. prints all persons in groups with namesakes (same first
         names) on consecutive lines.
      The user supplies the name of the input file from keyboard.

***** Data format
       The input data text file consists of lines, each line
       containing
       #+begin_center
       =lastname firstname address=
       #+end_center
       Both ~lastname~ and ~firstname~ are single words, while
       ~address~ is all the remaining text on the line.
**** Correctness
***** Typical test case
      File [[file:persons.txt]] contains data from 6 persons with 3
      groups of namesakes. The number of persons in these groups is 3
      (Michael), 2 (Jane) and 1. When the program (file
      [[file:main.py]]) is run the output is correct, with each group
      of namesakes printed on consecutive lines:
      #+begin_example
        give path to data file: persons.txt
        Cash Michael Las Vegas, US
        Knight Michael Moving truck
        Burnham Michael The final frontier
        McGyver Agnus Phoenix, Foundation
        Doe Jane Aberdeen, Scotland
        Tarzan Jane Greystoke, UK
      #+end_example

**** Resource management (level 2)
     The input file is opened using a =with=-statement, and will
     therefore be closed automatically.

*** Program code (provided here just for ease of reading, would be a separate file in your submission)
    #+begin_src python :exports code :tangle main.py
      import os.path

      def prompt_filename ():
          """
          Prompt the user for text file name until a valid file name is provided.

          Returns:
             path to valid text file
          """
          while not os.path.isfile (filename := input ('give path to data file: ')):
              print (f'data file {filename} does not exist')

          return filename

      class Person:
          def __init__ (self, lastname, firstname, address):
              self.lastname = lastname
              self.firstname = firstname
              self.address = address

          def __str__ (self):
              return f'{self.lastname} {self.firstname} {self.address}'

          def is_namesake (self, person):
              """
              Tests whether this person is a namesake of another.

              Args:
                  person: second person to be checked against

              Returns:
                  True if the two are namesakes, False otherwise.
              """
              return self.firstname == person.firstname

      def read_persons (filename):
          """
          Read persons from given text file.

          Args:
              filename: path to text file

          Returns:
              list of objects of type Person
          """
          persons = []
          with open (filename) as f:
              for line in f:
                  words = line.split ()
                  lastname = words [0]
                  firstname = words [1]
                  # address is everything from 3rd word; these are joined into single string
                  address = str.join (' ', words [2:]) 
                  persons.append (Person (lastname, firstname, address))

          return persons

      def print_namesakes (persons):
          """
          Print namesakes on consecutive lines.

          Args:
              list of objects of type Person
          """
          num_persons = len (persons)
          # traverse through persons
          for (index, person) in enumerate (persons):
              if person != None: # if this person has not been printed yet
                  print (person)
                  # traverse the rest of the list, looking for namesakes
                  for j in range (index + 1, num_persons):
                      candidate = persons [j]
                      if candidate != None and person.is_namesake (candidate):
                          print (candidate)
                          persons [j] = None # mark this person as printed

      filename = prompt_filename ()
      persons = read_persons (filename)
      print_namesakes (persons)
    #+end_src
